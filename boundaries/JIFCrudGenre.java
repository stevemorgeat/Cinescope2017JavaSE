package boundaries;

import daos.GenreDAO;
import daos.Globale;
import entities.Genre;
import java.awt.Component;
import java.awt.Rectangle;
import java.sql.*;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quent
 */
public class JIFCrudGenre extends javax.swing.JInternalFrame {

    private Connection cnx;
    private GenreDAO dao;
    private DefaultTableModel ldtm;
    private Object[] tLigne;
    private Genre g;

    /**
     * Creates new form JIFCrudGenre
     */
    public JIFCrudGenre() {
        initComponents();
        setVisible(true);

        // Bloc try/catch pour la connexion et l'instanciation de la jTable
        try {
            cnx = Globale.getCnx();
            System.out.println(cnx);

            ldtm = (DefaultTableModel) jTableGenre.getModel();

        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }

        remplirJTableGenre();

    }// Fin Constructeur

    private void remplirJTableGenre() {
        // Boucle permettant de mettre à jour la table genre ????????
        for (int i = ldtm.getRowCount() - 1; i >= 0; i--) {
            ldtm.removeRow(i);
        }

        /*
         * Bloc TRY and CATCH pour l'affichage des données de la table GENRE
         * dans la jTableGenre
         */
        try {
            // ??????????????????????
            dao = new GenreDAO(cnx);
            // Exécution de la procédure stockée définié dans le DAO
            List<Genre> listeGenre = dao.selectAll();
            for (int i = 0; i < listeGenre.size(); i++) {
                g = listeGenre.get(i);
                tLigne = new Object[4];
                tLigne[0] = g.getIdGenre();
                tLigne[1] = g.getCodeGenre();
                tLigne[2] = g.getLibelleGenre();
                tLigne[3] = g.getGenreGrammatical();
                ldtm.addRow(tLigne);
            }
        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }// Fin remplirJTableGenre

    private void cls() {
//        jTextFieldId.setText("");

        try {
            // Déclaration d'un tableau de composants
            Component[] tComposants = getContentPane().getComponents();
            // Boucle pour récupérer le nombre de composants sur le panel ?????????????
            for (int i = 0; i < tComposants.length; i++) {
                // ?????????????????????????
                Object objet = tComposants[i];
                /*
                 * Si un des composants présent sur le panel est identique à la 
                 * classe java correspondant aux JTextField, alors il faut le remplacer
                 * par une chaîne vide
                 */
                if (objet.getClass().toString().equals("class javax.swing.JTextField")) {
                    JTextField composant = (JTextField) objet;
                    composant.setText("");
                }
            }
        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }// Fin cls

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableGenre = new javax.swing.JTable();
        jLabelId = new javax.swing.JLabel();
        jLabelCode = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jLabelGrammatical = new javax.swing.JLabel();
        jLabelMessage = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldGrammatical = new javax.swing.JTextField();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonCLS = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTableGenre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Genre", "CODE_genre", "LIBELLE_genre", "genre_GRAMMATICAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableGenre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableGenreMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableGenre);

        jLabelId.setText("ID");

        jLabelCode.setText("Code");

        jLabelNom.setText("Nom");

        jLabelGrammatical.setText("Grammatical");

        jLabelMessage.setText("Message");

        jTextFieldId.setEditable(false);
        jTextFieldId.setBackground(new java.awt.Color(255, 51, 51));
        jTextFieldId.setBorder(null);

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonCLS.setText("CLS");
        jButtonCLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCLSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelMessage)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelId)
                            .addComponent(jLabelCode)
                            .addComponent(jLabelNom)
                            .addComponent(jLabelGrammatical)
                            .addComponent(jButtonCLS, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAjouter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonModifier)
                                .addGap(51, 51, 51)
                                .addComponent(jButtonSupprimer))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldId, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                .addComponent(jTextFieldCode)
                                .addComponent(jTextFieldNom)
                                .addComponent(jTextFieldGrammatical)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCode)
                    .addComponent(jTextFieldCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGrammatical)
                    .addComponent(jTextFieldGrammatical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonCLS))
                .addGap(18, 18, 18)
                .addComponent(jLabelMessage)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        int liAffecte = 0;

        // Bloc TRY and CATCH pour l'Insert d'un nouveau genre
        try {
            // ??????????????????????????????????
            dao = new GenreDAO(cnx);

            // Valorisation des paramètres de la requête SQL Insert
            g = new Genre(jTextFieldCode.getText(), jTextFieldNom.getText(), jTextFieldGrammatical.getText());
            // Exécution de l'ordre SQL
            liAffecte = dao.insert(g);
            // Condition. Si l'ordre SQL rempli les conditions
            if (liAffecte == 1) {
                // Validation de la transaction
                cnx.commit();
                // Mise à jour de la jTable
                remplirJTableGenre();
                int liMax = jTableGenre.getRowCount() - 1;
                jTableGenre.getSelectionModel().setSelectionInterval(liMax, liMax);
                // Scroll dans la jTable pour arriver directement sur le nouvel enregistrement
                jTableGenre.scrollRectToVisible(new Rectangle(jTableGenre.getCellRect(liMax, 0, true)));
            }
            jLabelMessage.setText("Genre ajouté : " + Integer.toString(liAffecte));

            // Remise à zéro des jTextField
            cls();

        } catch (SQLException e) {
            jLabelMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // DECONNEXION DE LA BD
//        try {
//            cnx.close();
//        } catch (SQLException ex) {
//            System.err.println(ex.getMessage());
//        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        // Condition, si le jTextField de l'ID est vide, message "d'erreur"
        if (jTextFieldId.getText().equals("")) {
            jLabelMessage.setText("Veuillez sélectionner une ligne !");
        } else {
            int liAffecte = 0;

            try {
                // ??????????????????????????????????
                dao = new GenreDAO(cnx);

                // Valorisation des paramètres de la requête SQL Update
                g = new Genre(Integer.valueOf(jTextFieldId.getText()), jTextFieldCode.getText(), jTextFieldNom.getText(), jTextFieldGrammatical.getText());
                // Exécution de l'ordre SQL                
                liAffecte = dao.update(g);
                // Condition. Si l'ordre SQL rempli les conditions
                if (liAffecte == 1) {
                    // Validation de la transaction
                    cnx.commit();

                    // Mise à jour de la jTable
                    remplirJTableGenre();
                }
                jLabelMessage.setText("Genre modifié : " + Integer.toString(liAffecte));

                // Remise à zéro des jTextField
                cls();

            } catch (SQLException e) {
                jLabelMessage.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // Condition, si le jTextField de l'ID est vide, message "d'erreur"
        if (jTextFieldId.getText().equals("")) {
            jLabelMessage.setText("Veuillez sélectionner une ligne !");
        } else {
            int liAffecte = 0;

            try {
                // ??????????????????????????????????
                dao = new GenreDAO(cnx);

                // Valorisation des paramètres de la requête SQL Update
                g = new Genre(Integer.valueOf(jTextFieldId.getText()), jTextFieldCode.getText(), jTextFieldNom.getText(), jTextFieldGrammatical.getText());
                // Exécution de l'ordre SQL 
                liAffecte = dao.delete(g);
                // Condition. Si l'ordre SQL rempli les conditions
                if (liAffecte == 1) {
                    // Validation de la transaction
                    cnx.commit();

                    // Mise à jour de la jTable
                    remplirJTableGenre();
                }
                jLabelMessage.setText("Supprimé : " + Integer.toString(liAffecte));

                // Remise à zéro des jTextField
                cls();

            } catch (SQLException e) {
                jLabelMessage.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jTableGenreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableGenreMouseClicked

        int selectedRow = this.jTableGenre.getSelectedRow();

        if (selectedRow >= 0) {
            jTextFieldId.setText(jTableGenre.getValueAt(selectedRow, 0).toString());
            jTextFieldCode.setText(jTableGenre.getValueAt(selectedRow, 1).toString());
            jTextFieldNom.setText(jTableGenre.getValueAt(selectedRow, 2).toString());
            jTextFieldGrammatical.setText(jTableGenre.getValueAt(selectedRow, 3).toString());
        } else {
            jLabelMessage.setText("Erreur");
        }
    }//GEN-LAST:event_jTableGenreMouseClicked

    private void jButtonCLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCLSActionPerformed
        // Lors du clic sur le bouton CLS, remise à zéro de tout les champs
        jTextFieldId.setText("");
        jTextFieldCode.setText("");
        jTextFieldNom.setText("");
        jTextFieldGrammatical.setText("");

    }//GEN-LAST:event_jButtonCLSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonCLS;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelGrammatical;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableGenre;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldGrammatical;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables
}
