/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package boundaries;

import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author allth
 */
public class JIFVisuMetro extends javax.swing.JInternalFrame {

    private Connection icn;
    /**
     * Creates new form JIFVisuMetro
     */
    public JIFVisuMetro() {
        initComponents();
        setVisible(true);
        
        PreparedStatement lpst;
        ResultSet lrs;
        String lsDSN;
        Object[] tEntetes;
        Object[][] tDataTable;
        Object[] tDataLigne;

        try {
            // Connexion à la DB
            lsDSN = "jdbc:mysql://127.0.0.1:3306/cinescope2017";
            icn = DriverManager.getConnection(lsDSN, "root", "");

            lpst = icn.prepareStatement("SELECT * FROM station_metro");
            lrs = lpst.executeQuery();

            /*
             * Récupération de la structure du curseur
             * Le tableau d'Objet des en-têtes est rempli à partir des noms des 
             * colonnes du curseur grâce au ResultSetMetaData.
             */
            ResultSetMetaData lrsmd = lrs.getMetaData();
            // Nombre de colonnes du curseur
            int liColonnes = lrsmd.getColumnCount();
            // Noms des colonnes de la table
            tEntetes = new Object[liColonnes];
            for (int i = 0; i < liColonnes; i++) {
                tEntetes[i] = lrsmd.getColumnName(i + 1);
            }

            /* 
             * Pour l'insertion des données de la table dans la jTableArrondissement
             * Pour obtenir le nombre d'enregistrements et pouvoir dimensionner le tableau,
             * il faut se positionner sur le dernier enregistrement.
             */
            lrs.last();
            int liLignes = lrs.getRow();
            tDataTable = new Object[liLignes][liColonnes];

            lrs.beforeFirst();
            int i = 0;
            // Balayage des lignes
            while (lrs.next()) {
                // Balayage des colonnes pour construire une ligne
                tDataLigne = new Object[liColonnes];
                for (int j = 0; j < liColonnes; j++) {
                    if (lrs.getObject(j + 1) == null) {
                        tDataLigne[j] = "NUL";
                    } else {
                        tDataLigne[j] = lrs.getObject(j + 1).toString();
                    }
                }
                tDataTable[i] = tDataLigne;
                i++;
            }

            // La jTableArrondissement est remplie avec les deux tableaux créés
            jTableMetroParis.setModel(new DefaultTableModel(tDataTable, tEntetes));

            // Fermetures
            lrs.close();
            lpst.close();

        } catch (SQLException e) {
            jLabelMessage.setText(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMetroParis = new javax.swing.JTable();
        jLabelMessage = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jTableMetroParis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableMetroParis);

        jLabelMessage.setText("Message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelMessage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelMessage)
                .addGap(0, 61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMetroParis;
    // End of variables declaration//GEN-END:variables
}
