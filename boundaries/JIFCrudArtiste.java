/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boundaries;

import daos.ArtisteDAO;
import daos.Globale;
import entities.Artiste;
import java.awt.Rectangle;
import java.sql.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author allth
 */
public class JIFCrudArtiste extends javax.swing.JInternalFrame {

    private Connection icn;
    private DefaultTableModel idtm;
    private final String artisteMotif = "^[a-zA-Zàâéèëêïîôùüçœ\\'’ -]{2,50}$";

    /**
     * Creates new form JIFCrudArtiste
     */
    public JIFCrudArtiste() {
        initComponents();

        setTitle("Artiste CRUD");

        remplirJTable();

        setVisible(true);
    }

    private void remplirJTable() {

        idtm = (DefaultTableModel) jTableArtiste.getModel();

        for (int i = idtm.getRowCount() - 1; i >= 0; i--) {
            idtm.removeRow(i);
        }

        try {
            // --- Connexion
//            Class.forName("org.gjt.mm.mysql.Driver");
//            String lsDSN = "jdbc:mysql://127.0.0.1:3306/cinescope2017";
//            icn = DriverManager.getConnection(lsDSN, "root", "");

            // utilisation de la Class Connexion
            icn = Globale.getCnx();

            ArtisteDAO daoS = new ArtisteDAO(icn);
            List<Artiste> liste = daoS.selectAll();
            Artiste dep;
            Object[] tLigne;
            for (int i = 0; i < liste.size(); i++) {
                dep = liste.get(i);
                System.out.println(dep);
                tLigne = new Object[3];

                tLigne[0] = "";
                tLigne[1] = dep.getIdArtiste();
                tLigne[2] = dep.getNomArtiste();

                idtm.addRow(tLigne);
            }

            jLabelMessage.setText("Okay !!!");

        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    } /// remplirJTable

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableArtiste = new javax.swing.JTable();
        jLabelId = new javax.swing.JLabel();
        jLabelNomArtiste = new javax.swing.JLabel();
        jLabelMessage = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldNomArtiste = new javax.swing.JTextField();
        jButtonAjout = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonValiderTout = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Artiste CRUD");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTableArtiste.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flag", "Id", "nom de l'artiste"
            }
        ));
        jTableArtiste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableArtisteMouseClicked(evt);
            }
        });
        jTableArtiste.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableArtisteKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableArtiste);

        jLabelId.setText("Id :");

        jLabelNomArtiste.setText("Nom de l'artiste :");

        jLabelMessage.setText("Message");

        jTextFieldId.setEditable(false);
        jTextFieldId.setText("Id");

        jButtonAjout.setText("Ajout");
        jButtonAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjoutActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Suppression");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonValiderTout.setText("Valider Tout");
        jButtonValiderTout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderToutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAnnuler)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonValiderTout))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButtonAjout)
                            .addGap(45, 45, 45)
                            .addComponent(jButtonDelete)
                            .addGap(45, 45, 45)
                            .addComponent(jButtonUpdate))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelNomArtiste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldNomArtiste))
                        .addGap(165, 165, 165))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAjout, jButtonAnnuler, jButtonDelete, jButtonUpdate, jButtonValiderTout});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jLabelNomArtiste))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNomArtiste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAjout)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonUpdate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAnnuler)
                    .addComponent(jButtonValiderTout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelMessage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        //        
        int liLigneSelectionnee = jTableArtiste.getSelectedRow();

        if (liLigneSelectionnee == -1) {
            jLabelMessage.setText("Sélectionnez une ligne !!!");
        } else {
            if (!jTextFieldNomArtiste.getText().trim().matches(artisteMotif)) {
                jLabelMessage.setText("Saisies obligatoires ou incorrect (mini 2 caractères, max 50)");
            } else {
                String lsFlag = jTableArtiste.getValueAt(liLigneSelectionnee, 0).toString();
                if (lsFlag.equals("ajout")) {
                    jTableArtiste.setValueAt(jTextFieldNomArtiste.getText(), liLigneSelectionnee, 2);
                } else {
                    jTableArtiste.setValueAt("update", liLigneSelectionnee, 0);
                    jTableArtiste.setValueAt(jTextFieldNomArtiste.getText(), liLigneSelectionnee, 2);
                }
            }
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed

        //
        int liLigneSelectionnee = jTableArtiste.getSelectedRow();

        if (liLigneSelectionnee != -1) {
            String lsFlag = jTableArtiste.getValueAt(liLigneSelectionnee, 0).toString();
            if (!jTextFieldNomArtiste.getText().trim().matches(artisteMotif)) {
                jLabelMessage.setText("Saisies obligatoires ou incorrect (mini 2 caractères, max 50)");
            } else {
                if (lsFlag.equals("ajout")) {
                    idtm.removeRow(liLigneSelectionnee);
                } else {
                    jTableArtiste.setValueAt("delete", liLigneSelectionnee, 0);
                }
            }
        } else {
            jLabelMessage.setText("Sélectionnez une ligne !!!");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjoutActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldNomArtiste.getText().trim().matches(artisteMotif)) {
            jLabelMessage.setText("Saisies obligatoires ou incorrect (mini 2 caractères, max 50)");
        } else {

            String[] ligne = new String[3];
            ligne[0] = "ajout";
            ligne[1] = "";
            ligne[2] = jTextFieldNomArtiste.getText();
            idtm.addRow(ligne);
            int liMax = jTableArtiste.getRowCount() - 1;
            jTableArtiste.getSelectionModel().setSelectionInterval(liMax, liMax);
            jTableArtiste.scrollRectToVisible(new Rectangle(jTableArtiste.getCellRect(liMax, 0, true)));
        }
    }//GEN-LAST:event_jButtonAjoutActionPerformed

    private void jButtonValiderToutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderToutActionPerformed
        // TODO add your handling code here:

        try {

            String lsFlag;
            for (int i = jTableArtiste.getRowCount() - 1; i >= 0; i--) {
                lsFlag = jTableArtiste.getValueAt(i, 0).toString();
                if (lsFlag.equals("ajout")) {
                    Artiste aI = new Artiste(jTableArtiste.getValueAt(i, 2).toString());
                    ArtisteDAO daoI = new ArtisteDAO(icn);
                    int rI = daoI.insert(aI);
                    if (rI == 1) {
                        jTableArtiste.setValueAt("", i, 0);
                        System.out.println("insertion de " + jTableArtiste.getValueAt(i, 2).toString());
                    } else {
                        jTableArtiste.setValueAt("--echec--", i, 0);
                        System.out.println("echec de la insertion de " + jTableArtiste.getValueAt(i, 2).toString());
                    }
                }
                if (lsFlag.equals("delete")) {
                    Artiste aD = new Artiste(Integer.valueOf(jTableArtiste.getValueAt(i, 1).toString()), jTableArtiste.getValueAt(i, 2).toString());
                    ArtisteDAO daoD = new ArtisteDAO(icn);
                    int rD = daoD.delete(aD);
                    if (rD == 1) {
                        jTableArtiste.setValueAt("", i, 0);
                        System.out.println("suppression de " + jTableArtiste.getValueAt(i, 2).toString());
                    } else {
                        jTableArtiste.setValueAt("--echec--", i, 0);
                        System.out.println("echec de la suppression de " + jTableArtiste.getValueAt(i, 2).toString());
                    }
                }
                if (lsFlag.equals("update")) {
                    Artiste dU = new Artiste(Integer.valueOf(jTableArtiste.getValueAt(i, 1).toString()), jTableArtiste.getValueAt(i, 2).toString());
                    ArtisteDAO daoU = new ArtisteDAO(icn);
                    int rU = daoU.update(dU);
                    if (rU == 1) {
                        jTableArtiste.setValueAt("", i, 0);
                        System.out.println("modification de " + jTableArtiste.getValueAt(i, 2).toString());
                    } else {
                        jTableArtiste.setValueAt("--echec--", i, 0);
                        System.out.println("echec de la modification de " + jTableArtiste.getValueAt(i, 2).toString());
                    }
                }

            }
            icn.commit();
            jLabelMessage.setText("Validations exécutées");
            remplirJTable();
        } catch (SQLException e) {
            try {
                icn.rollback();
            } catch (SQLException ex) {
                Logger.getLogger(JIFCrudArtiste.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonValiderToutActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        // TODO add your handling code here:
        remplirJTable();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jTableArtisteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableArtisteMouseClicked
        // TODO add your handling code here:
        //
        int liLigne = jTableArtiste.getSelectedRow();

        String lsID = jTableArtiste.getValueAt(liLigne, 1).toString();
        String lsNom = jTableArtiste.getValueAt(liLigne, 2).toString();

        jTextFieldId.setText(lsID);
        jTextFieldNomArtiste.setText(lsNom);
    }//GEN-LAST:event_jTableArtisteMouseClicked

    private void jTableArtisteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableArtisteKeyReleased
        // TODO add your handling code here:
        jTableArtisteMouseClicked(null);
    }//GEN-LAST:event_jTableArtisteKeyReleased

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
         //TODO add your handling code here:
        try {
            icn.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjout;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonValiderTout;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelNomArtiste;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableArtiste;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNomArtiste;
    // End of variables declaration//GEN-END:variables
}
